@page "/"
@namespace ExamsSchedule.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title> AI Exams Scheduler </title>
    <base href="~/" />
    <link rel="stylesheet" href="_content/BlazorDateRangePicker/daterangepicker.min.css" />
    <link rel="stylesheet" href="https://andrealombardo.github.io/BootSideMenu/css/BootSideMenu.css" />
    <link rel="stylesheet" href="_content/BlazorStrap.Extensions.TreeView/css/style.css" />
    <link rel="stylesheet" href="_content/BlazorStrap/css/submenu.css" />
    <link rel="stylesheet" href="plugins/fontawesome-free/css/all.min.css">
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    <link rel="stylesheet" href="plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
    <link rel="stylesheet" href="plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css">
    <link rel="stylesheet" href="dist/css/adminlte.min.css">
    <link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
    @*<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">*@
    <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700" rel="stylesheet">

</head>
<body class="hold-transition sidebar-mini layout-fixed layout-navbar-fixed layout-footer-fixed" style="font-size: larger;">
    <app class="wrapper">
        <component type="typeof(App)" render-mode="ServerPrerendered" />
        <footer class="main-footer">
            <strong>Copyright &copy; @DateTime.Now.Year <a href="javascript:void(0)">AI Exams Scheduler</a>.</strong>
            All rights reserved.
        </footer>
    </app>

    <script src="plugins/jquery/jquery.min.js"></script>
    <script src="plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
    <script>
        $.widget.bridge('uibutton', $.ui.button)
    </script>
    <script src="plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="dist/js/adminlte.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

    <script src="https://andrealombardo.github.io/BootSideMenu/js/BootSideMenu.js"></script>
    <script src="_content/Microsoft.AspNetCore.ProtectedBrowserStorage/protectedBrowserStorage.js"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js"></script>


    <script>
        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
        });
    </script>
    <script>
        Blazor.defaultReconnectionHandler._reconnectCallback = function (d) {
            document.location.reload();
        }
    </script>

</body>
</html>

<script>


        let popup;
        let lastconversation;

    function talkInit(){

        console.log("talkInit");
        var me = new Talk.User({
            id:  'Proctor',
            name: 'Proctor',
            welcomeMessage: 'Hey, how can I help?',
        });

        window.talkSession = new Talk.Session({
            appId: 'l7EjQDKW',
            me: me,
        });


        window.talkSession.unreads.on('change', function (unreadConversations) {
            var amountOfUnreads = unreadConversations.length;

            console.log("message");
            if (amountOfUnreads > 0) {
               
                for (let i = 0; i < unreadConversations.length; i++) {
                    console.log("unread" + unreadConversations[i].lastMessage.conversation.id);
                    $("#" + unreadConversations[i].lastMessage.conversation.id).val("")
                    $("#" + unreadConversations[i].lastMessage.conversation.id).prop("style", "background-color: red; height:20px; width:20px; border-radius:100%; border:0px")
                    console.dir(unreadConversations[i])
                }
            } else {
                //document.getElementById("notifier-badge").innerHTML = "";
                console.log("all read");
            }
        });
    }

    function chatStatusReset(conversationId) {
       // $("#" + conversationId).val("Chat")
        $("#" + conversationId).prop("style", "background-color: lightgreen; height:20px; width:20px;; border-radius:50%; border:0px")
    }

    function chatInit(conversationId, studentName, proctorName) {
        console.log("Chat Started")
        var me = new Talk.User({
            id: proctorName,
            name: proctorName,
            welcomeMessage: 'Need Assistance?',
        });

       

        var student = new Talk.User({
            id: studentName,
            name: studentName,
        });
        chatStatusReset(conversationId);

        // assume `session` has been set elsewhere
        var conversation = window.talkSession.getOrCreateConversation(conversationId);
        conversation.setParticipant(me);
        conversation.setParticipant(student);

        if (popup) {
            popup.show(); //in case popup is hidden
            popup.select(conversation); //select the conversation clicked on
            lastconversation = conversationId;
        } else {
            //if there is no existing popup, create one
            popup = window.talkSession.createPopup(conversation);
            popup.mount({ show: true });
            lastconversation = conversationId;

            popup.on('close', function (event) {
                console.dir(event);
                chatStatusReset(lastconversation);
                popup.destroy();
                popup = null;
            });
        }
    }

    $(function () {

        if (location.pathname) {
            setTimeout(function () {
                var pathName = location.pathname.replace('/', '');
                $('.sidebar ul li .' + pathName).addClass('active');
            }, 600);
        }

        $(document).on('click', '.sidebar ul li', function () {
            $('.sidebar ul li .nav-link').removeClass('active');
            $(this).find('.nav-link').addClass('active');
        });

        $(document).on('click', '.btn-toggler', function () {
            $('#test').animate({
                width: 'show',

            }, 500);
        });
        $(document).on('click', '.hide-slider', function () {
            $('#test').animate({
                width: 'hide',

            }, 500);
        });

        $(document).on('click', '.navigation-item-link', function () {
            var $this = $(this);
            if ($this.attr('href') == 'liveproctor') {
                //$('body').addClass('sidebar-collapse');

                setTimeout(function () {
                    $('body').addClass('sidebar-collapse');
                }, 1000);
            }
        });

    });

    var gridRefreshOn = false;
    var liveRefreshOn = false;

    function refreshGrid() {
        console.log("Refresh state :" + gridRefreshOn)

        if (gridRefreshOn) {
            console.log("refreshGrid called but returning..");
            return;
        }


        setInterval(function () {
            console.log("refreshGrid called..");
            gridRefreshOn = true;
            $('#BtnRefresh').click()
        }, 15000);
    }

    function refreshLiveView() {
      
        if (liveRefreshOn) return;
       // talkInit();
       
        setInterval(function () {
            liveRefreshOn = true;
            $("img.lazy").lazyload({ effect: "fadeIn" });
            console.log("refreshLiveView called..");
            $('#BtnRefreshLiveView').click()
            //talkInit();
        }, 8000);
    }

    function sideBarMenu() {
        $('#test').animate({
            width: 'toggle',

        }, 500);
    }
</script>
